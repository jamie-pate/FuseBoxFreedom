#define FUSE_ACTION_COMMENT
//#define COMMENTS
//#define FULL_COMMENT
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Linq;
using System.IO;


namespace FuseboxFreedom {
    class Program {
        static void Main(string[] args) {
            XDocument doc = XDocument.Load(args[0]);
            StreamWriter sw = new StreamWriter(args[1]);

            sw.Write(String.Join("\n", doc.Elements("circuit").SelectMany(c=>WriteCircuit(c))));
            sw.Close();
        }

        /// <summary>
        /// Write a cfc circuit from a circuit.xml.cfm. 
        /// Not completely accurate as far as fusebox behavior
        /// but this is the way i think it should work
        /// prefuseaction becomes init()
        /// postfuseaction raises an exception
        /// </summary>
        /// <param name="circuit">circuit node to transform.</param>
        /// <returns></returns>
        static IEnumerable<string> WriteCircuit(XElement circuit) {
            CheckSupportedAccess(circuit);
            return new string[] {
                "component hint=\"Generated by FuseboxFreedom http://www.github.com/jamie-pate/FuseBoxFreedom\" output=\"False\" {",
#if COMMENTS
                "//Handle all the boilerplate",
#endif
                tab("this.fb = createObject('component', 'cfcs.fbFreedom').init(this)"),
                "",
                }.Concat(circuit.Elements("prefuseaction").SelectMany(pfa=>tab(WriteFA(pfa, "init"))))
                .Concat(circuit.Elements("fuseaction").SelectMany(fa=>tab(WriteFA(fa))))
                .Concat(circuit.Elements("postfuseactioon").SelectMany(pfa=>tab(NotImplemented(pfa))))
                .Concat(new string[] {
                "}"
                });
        }

        private static IEnumerable<string> NotImplemented(XElement elem) {
            throw new NotImplementedException();
        }

        static string tab(string str) {

            return String.Join("\n", str.Split('\n').Select(s => String.IsNullOrWhiteSpace(s) ? s : "\t" + s));
        }
        static IEnumerable<string> tab(IEnumerable<string> strings) {
            return strings.Select(s=>tab(s));
        }

        static string comment(string str) {
            return String.Join("\n", str.Split('\n').Select(s => "//" + s));
        }

        static IEnumerable<string> comment(XElement elem, string output) {
            return new string[] {
#if COMMENTS
                comment(elem),
#endif
                output
            };
        }

        static IEnumerable<string> comment(XElement elem, IEnumerable<string> output, bool empty = false) {
#if COMMENTS
            return new string[] {comment(elem, empty)}.Concat(output);
#else
            return output;
#endif
        }
        static string comment(XElement elem, bool empty = false) {
#if FULL_COMMENT
            empty = false;
#endif
            if (empty) {
                elem = new XElement(elem);
                elem.ReplaceAll(elem.Attributes());
            }
            return comment(elem.ToString());
        }

        static IEnumerable<string> CFFunction(string name, IEnumerable<string> lines) {
            return new string[] {
#if FUSE_ACTION_COMMENT
                    comment("fuseAction"),
#endif
                    String.Format("function {0}() {{", name)
                }.Concat(tab(lines))
                .Concat(new string[]{"}",""});
        }
        
        static void CheckSupportedAccess(XElement elem ) {
            if (!new string[] {"", "public"}.Contains(elem.Attr("access").ToLower())) {
                throw new NotImplementedException("access levels other than public for " + elem.ToString());
            }
        }

        static IEnumerable<string> WriteFA(XElement fuseAction, string methodName = null) {
            CheckSupportedAccess(fuseAction);
            return comment(fuseAction,
                CFFunction(methodName ?? fuseAction.Attribute("name").Value,
                              fuseAction.Elements().SelectMany(e => comment(e, FuseElement(e), true)))
                , true);
        }

        static IEnumerable<string> FuseElements(XElement elem) {
            return elem.Elements().SelectMany(e => comment(e, FuseElement(e), true));
        }

        static bool Falsy(string b, bool emptyValue = false) {
            switch (b.ToLower()) {
                case "false":
                case "no":
                case "0":
                    return false;
                case "":
                    return emptyValue;
                default:
                    return true;
            }
        }

        static IEnumerable<string> OverWrite(XElement elem, XName attrName, params string[] lines) {
            XAttribute name = elem.Attribute(attrName);
            if (!Falsy(elem.Attr("overwrite"), false)) {
                return lines.Select(l=>Assign(name, l));
            } else {
                if (name == null) {
                    throw new NotSupportedException("Cannot overwrite when name attribute is not present");
                }
                return new string[] {
                   String.Format("if (not isdefined(\"{0}\")) {{",
                        name.Value)
                }.Concat(tab(lines.Select(l=>Assign(name, l))))
                .Concat(new string[] {
                    "}"
                });
            }
        }

        /// <summary>
        /// remove extra hash marks from #expression#.
        /// If # is detected inside expression, return "#expres##sion#"
        /// </summary>
        /// <param name="str"></param>
        /// <returns></returns>
        static string DeHash(string str) {
            string chopped = str.Length > 2 ? str.Substring(1, str.Length - 2) : str;
            if (str.StartsWith("#") && str.EndsWith("#") && !chopped.Contains('#')) {
                return chopped;
            } else {
                return "\"" + str + '\"';
            }
        }

        static string Assign(XAttribute name, string value) {
            return name != null ?
                String.Format("{0} = {1};",
                    name.Value, value) :
                String.Format("{0};",
                    value);
        }

        static IEnumerable<string> FuseElement(XElement elem) {
            switch (elem.Name.ToString()) {
                case "xfa":
                    return new string[] {
                            String.Format("this.fb.set_xfa(\"{0}\",\"{1}\", {2});",
                            elem.Attr("name"), elem.Attr("value"), !Falsy(elem.Attr("overwrite"), true))
                    };
                case "set":
                    return OverWrite(elem, "name", DeHash(elem.Attr("value")));
                case "if":
                    XElement t = elem.Element("true");
                    XElement f = elem.Element("false");
                    List<string> result = new List<string>();
                    if (t != null || f != null) {
                        string fmt = t == null ? "not({0})" : "{0}";
                        result.Add(String.Format("if ({0}) {{",
                            String.Format(fmt,
                                elem.Attr("condition"))));
                        if (t != null) {
                            result.AddRange(tab(comment(
                                t,
                                FuseElements(t),
                                true)));
                        }
                        if (t != null && f != null) {
                            result.Add("} else {");
                        }
                        if (f != null) {
                            result.AddRange(tab(comment(
                                f,
                                FuseElements(f),
                                true)));
                        }
                        result.Add("}");
                        return result;
                    } else {
                        throw new NotImplementedException("Empty if");
                    }
                case "relocate":
                    //<cflocation url="#xfa.cart###nocart" addtoken="no">
                    return new string[] {
                        String.Format("location(\"{0}\", {1})", elem.Attr("url"), false)
                    };
                case "instantiate":
                    return comment(elem, OverWrite(elem, "object",
                        String.Format("this.fb.instantiate(\"{0}\");",
                            elem.Attr("class"))));

                case "invoke":
                    XAttribute mc = elem.Attribute("methodcall");
                    if (mc == null) {
                        throw new NotFiniteNumberException(elem.ToString());
                    }
                    return OverWrite(elem, "returnvalue",
                        String.Format("this.fb.instantiate(\"{0}\")",
                            elem.Attr("class")),
                        tab(String.Format(".{0};", mc.Value)));

                case "do":
                    return OverWrite(elem, "contentvariable",
                        String.Format("this.fb.do(\"{0}\", {1})",
                            elem.Attr("action"), !Falsy(elem.Attr("contentvariable"), true))
                        );
                case "include":
                    return OverWrite(elem, "contentvariable",
                        String.Format("this.fb.include(\"{0}\", {1})",
                            elem.Attr("template"), !Falsy(elem.Attr("contentvariable"), true)));
                default:
                    throw new NotImplementedException(elem.Name.ToString());
                
            }
            
        }

    }
    static class XElementExtensions {
        public static string Attr(this XElement elem, XName name) {
            XAttribute attr = elem.Attribute(name);
            if (attr != null) {
                return attr.Value;
            } else {
                return "";
            }
        }
    }

}
